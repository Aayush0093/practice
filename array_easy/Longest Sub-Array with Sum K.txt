Longest Sub-Array with Sum K
Difficulty: MediumAccuracy: 24.64%Submissions: 332K+Points: 4
Given an array arr containing n integers and an integer k. Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value k.

 

Examples:
 

Input :
arr[] = {10, 5, 2, 7, 1, 9}, k = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.


class Solution{
    public:
    int lenOfLongSubarr(int a[],  int n, int k) 
    { 
        
        // optimal not for -ve
        // int i = 0 , j = 0 , len = 0;
        // long long sum=a[0];
        
        // while(j<n){
            
        //     while(i<=j && sum>k){
        //         sum-=a[i];
        //         i++;
        //     }
            
        //     if(sum==k){
        //         len = max(len,j-i);
        //     }
            
        //     j++;
        //     if(sum<k){
        //         sum+=a[j];
        //     }
            
        // }
        
        // return len;
        
        // Complete the function
        // brute force approach
        
        // int len = 0;
        // int sum = 0;
        // for(int i = 0; i < n; i++){
        //     for(int j = i; i < n; j++){
        //         sum = 0;
        //         for(int k = i ; k < j ; k++){
        //             sum+=a[k];
        //             if(sum==x){
        //                 len=max(len,j-i+1);
        //             }
        //         }
        //     }
        // }
        
        // return len;
        
        // hashing
        // map <long long int , int> mpp;
        
        // int len = 0;
        // long long sum = 0;
        
        // for(int i = 0 ; i < n; i++){
        //     sum+=a[i];
            
        //     if(sum==k){
        //         len = max(len,i+1);
        //     }
            
        //     long long rem = sum-k;
        //     // calculate for x-k and if it exists calculate the length of it
        //     // and it will be difference of ofcourse 3 if it exists
        //     if(mpp.find(rem)!=mpp.end()){
        //         int lenif = i-mpp[rem];
        //         len = max(len,lenif);
        //     }
            
        //     // if sum not exists we add it
        //     if(mpp.find(sum)==mpp.end()){
        //         mpp[sum] = i;
        //     }
            
        // }
        
        // return len;
        
        
    } 

};