15. 3Sum
Solved
Medium

Topics
Companies

Hint
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // set<vector<int>> st;
        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        // optimal
        int i = 0;
        int j,k,sum;

        for(i=0; i < n; i++){
            if(i!=0 && nums[i]==nums[i-1]) continue;
            j = i+1;
            k = n-1;

            while(j<k){
                // find dum first
                sum = nums[i]+nums[j]+nums[k];

                if(sum < 0) j++;
                else if(sum > 0) k--;
                else{
                    vector<int> temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++; k--;

                    // get rid of checking again and duplicates
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--; 
                }
            }
        }

        // // brute
        // int target = 0;
        // for(int i = 0 ; i < n ; i++){
        //     for(int j = i+1 ; j < n ; j++){
        //         for(int k = j+1; k < n ; k++){
        //             if(nums[i]+nums[j]+nums[k]==0){
        //                 vector<int> temp = {nums[i],nums[j],nums[k]};
        //                 sort(temp.begin(), temp.end());
        //                 st.insert(temp);
        //             }
        //         }
        //     }
        // }

        // vector<vector<int>> ans(st.begin(),st.end());

        return ans;
    }
};