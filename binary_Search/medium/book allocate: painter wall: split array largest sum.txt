410. Split Array Largest Sum
Solved
Hard

Topics
Companies
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.

class Solution {
public:
    int start = 0 , end = 0 , mid ,ans = 0 ;

    bool isSum (vector<int>& nums, int k){
        int sum = 0 , student = 1 ;

        for ( int i = 0 ; i < nums.size() ; i++ ){

            if(sum + nums[i] <= mid ) sum += nums[i] ;

            else {
                student++ ;
                sum = nums[i] ; 
                if ( student > k || nums[i] > mid ) return false ;
            }
        }
        return true ;
    }
    int splitArray(vector<int>& nums, int k) {
        
        int sum = 0;
        for ( int i = 0 ; i < nums.size() ; i++ ){
            sum +=nums[i] ; 
        }

        int end = sum;

        while ( start <= end ) {

            mid = (start+end) / 2 ;

            if (isSum( nums , k ) ) {
                end = mid - 1 ;
                ans = mid ;
            }

            else {
                start = mid + 1 ;
            }
            
        }

        return ans;
    }
};